% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cv.coxtp.r
\name{cv.coxtp}
\alias{cv.coxtp}
\title{fit a cox Non-proportional Hazards model with P-spline or Smoothing-spline, penalization coefficient is provided by cross validation}
\usage{
cv.coxtp(
  event,
  z,
  time,
  strata = NULL,
  nfolds = 5,
  foldid = NULL,
  penalty = "Smooth-spline",
  nsplines = 8,
  ties = "Breslow",
  tol = 1e-09,
  iter.max = 20L,
  method = "ProxN",
  lambda = 1e+08,
  btr = "dynamic",
  tau = 0.5,
  stop = "ratch",
  parallel = FALSE,
  threads = 1L,
  degree = 3L,
  lambda.spline = 0,
  fixedstep = FALSE
)
}
\arguments{
\item{event}{response variable of length \code{nobs}, should be a vector containing 0 or 1}

\item{z}{input covariate matrix, of dimension \code{nobs} * \code{nvars}; each row is an observation vector.}

\item{time}{follow up time, should be a vector with non-negative numeric value}

\item{strata}{stratification group defined in the data. If there exists stratification group, please enter as vector.
By default a non-stratified model would be implemented}

\item{nfolds}{number of folds - default is 5. Although nfolds can be as large as the sample size (leave-one-out CV), it is not recommended for large datasets. Smallest value allowable is nfolds=3}

\item{foldid}{an optional vector of values between 1 and nfold identifying what fold each observation is in. If supplied, nfold can be missing.}

\item{penalty}{a character string specifying the spline term for Penalized Newton's Method.
This term is added to the log-partial likelihood as the new objective function to control the model's smoothness.

\code{P-spline} stands for "Penalized B-spline". It combines the B-spline basis with a discrete quadratic penalty on the basis coefficients between adjacent knots.

\code{Smooth-spline} refers to the Smoothing-spline, the derivative based penalties combined with B-splines. Default value is \code{Smooth-spline}.}

\item{nsplines}{number of basis functions in the B-splines to span the time-varying effects, default value is 8.
We use the r function \code{splines::bs} to generate the B-splines.}

\item{ties}{a character string specifying the method for tie handling. If there are no tied
death times, the methods are equivalent.  By default \strong{\code{ties="Breslow"}} uses the Breslow approximatio, this can be faster when many ties occured.}

\item{tol}{convergence threshold for Newton's method. The algorithm continues until the method selected using \code{stop} converges.
The default value is  \code{1e-6}.}

\item{iter.max}{maximum Iteration number, default value is  \code{20L}.}

\item{method}{a character string specifying whether to use Newton's method or Proximal Newton's method.  If \code{"Newton"} then exact hessian is used,
while default method \code{"ProxN"} implementing the proximal method which can be faster and more stable when there exists ill-conditioned second-order information of the log-partial likelihood.
See details in Wu et al. (2022).}

\item{lambda}{a user specified \code{lambda.spline} sequence as the penalization coefficients in front of the spline term specified by \code{spline}.
This is the tuning parameter for penalization. Users can use \code{IC} to select the best tuning parameter based on the information criteria.
Users can specify for larger values when the estimated time-varying effects are too high.
Default is \code{0} which refers to Newton's Method without penalization.}

\item{btr}{a character string specifying the backtracking line search approach. \code{"dynamic"} is typical way to perform backtracking linesearch.
\code{"static"} limits the Newton's increment, and can achieve more stable results in some extreme cases such as ill-conditioned second-order information of the log-partial likelihood,
which usually occur when some predictors are categorical with low frequency for some categories.
Users should be careful with \code{static} as this may lead to underfitting.}

\item{tau}{a scalar in (0,1) used to control the step size inside the back tracking linesearch. Default value is \code{0.5}.}

\item{stop}{a character string specifying the stopping rule to determine convergence. Use \code{loglik(m)} to denote the log-partial likelihood at iteration step m.
\code{"incre"} means we stop the algorithm when Newton's increment is less than the \code{tol}.
\code{"relch"} means we stop the algorithm when the \code{loglik(m)} divided by the  \code{loglik(0)} is less than the \code{tol}.
\code{"ratch"} means we stop the algorithm when \code{(loglik(m)-loglik(m-1))/(loglik(m)-loglik(0))} is less than the \code{tol}.
\code{"all"} means we stop the algorithm when all the stopping rules \code{"incre"}, \code{"relch"} and \code{"ratch"} is met. Default value is \code{ratch}.}

\item{parallel}{if \code{TRUE} then parallel computation is enabled. The number of threads to be used is determined by \code{threads}.}

\item{threads}{an integer indicating the number of threads to be used for parallel computation. Default is \code{2}. If \code{parallel} is false, then the value of \code{threads} has no effect.}

\item{degree}{degree of the piecewise polynomial for generating the B-spline basis functions---default is 3 for cubic splines.
\code{degree = 2} results in the quadratic B-spline basis functions.

If \code{penalty} is \code{Smooth-spline}, different choices of \code{degree} give different results.
When \code{degree=3}, we use the cubic B-spline penalizing the second order derivative, which reduces to a linear term.
When \code{degree=2}, we use the quadratic B-spline penalizing first order derivative, which reduces to a constant. See Wood (2016) for details.
Default is \code{degree=2}.}

\item{fixedstep}{if \code{TRUE}, the algorithm will be forced to run \code{iter.max} steps regardless of the stopping criterion specified.}

\item{knots}{the internal knot locations (breakpoints) that define the B-splines.
The number of the internal knots should be \eqn{`nsplines`-`degree`-1}.
If \code{NULL}, the locations of knots are chosen to include an equal number of events within each time interval. This leads to more stable results in most cases.
Users can specify the internal knot locations by themselves.}

\item{gamma}{parameter for Proximal Newton's Method \code{"ProxN"}. Default value is \code{1e8}.}
}
\value{
\item{model.cv}{a \code{"coxtp"} object with penalization coefficient chosen based on cross validation}
\item{lambda.spline}{the values of \code{lambda.spline} used in the fits.}
\item{cv.loglik}{The mean log-partial likelihood on each fold after based on the model trained on remaining folds - a vector of length length(lambda.spline).}
\item{lambda.selected}{Value of \code{lambda.spline} that gives maximum cv.loglik}
}
\description{
Fit a cox Non-proportional Hazards model via penalized maximum likelihood.
}
\details{
The function runs \code{coxtp} \code{nfolds} times; each is to compute the fit with each of the folds omitted.
}
\examples{
data(ExampleData)
z <- ExampleData$x
time  <- ExampleData$time
event <- ExampleData$event

lambda.spline  = c(0,1)
fit   <- cv.coxtp(event = event, z = z, time = time, lambda=lambda.spline, nfolds = 5)
}
