[{"path":"/articles/A_Simple_Start.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction:","title":"A_Simple_Start","text":"Coxtp R package fitting penalized Newton’s method time-varying effects model using mAIC, TIC, GIC information criteria, particular span parameter using basis functions. Utilities carrying post-fitting visualization, summarize, inference also provided.","code":""},{"path":"/articles/A_Simple_Start.html","id":"installation","dir":"Articles","previous_headings":"","what":"2. Installation:","title":"A_Simple_Start","text":"","code":"library(surtvep) #> Loading required package: ggplot2 #> Loading required package: splines2 #> Warning: package 'splines2' was built under R version 4.1.3"},{"path":"/articles/A_Simple_Start.html","id":"dataset-preperation","dir":"Articles","previous_headings":"","what":"3. Dataset preperation:","title":"A_Simple_Start","text":"purpose demonstration, use simulated dataset “sim_data” package. Let’s check data first: , let’s extract time event vector, get remaining information dataset matrix","code":"sim_data=sim_data head(sim_data) #>      V1 V2 event         time #> [1,]  0  0     1 0.0003028248 #> [2,]  0  0     1 0.0004273569 #> [3,]  0  0     0 0.0008948164 #> [4,]  0  0     1 0.0008981023 #> [5,]  0  0     0 0.0009103830 #> [6,]  0  0     1 0.0010759157 event=sim_data[,\"event\"] time=sim_data[,\"time\"] data=sim_data[,!colnames(sim_data) %in% c(\"event\",\"time\")]"},{"path":[]},{"path":[]},{"path":"/articles/A_Simple_Start.html","id":"simple-fitting","dir":"Articles","previous_headings":"4. Model fitting > 4.1 Newton Method without penalization:","what":"4.1.1 Simple fitting:","title":"A_Simple_Start","text":"Let’s fit model. , default method Newton Method without penalization, smooth-spline. Term lambda_spline refers smoothing parameter lambda(Detail found “Model parameter(Add link)” section paper (add link). Default value 0, refers penalization. get estimated time-varying effect specific coefficient, use following plot function package:  plot shows result time-varying effect Variable “V1”.","code":"fit <- coxtp(event = event, z = data, time = time) coxtp.plot(fit,coef=\"V1\")"},{"path":"/articles/Model_Parameters.html","id":"coxtp","dir":"Articles","previous_headings":"","what":"1. coxtp:","title":"Model_Parameters","text":"coxtp(formula,data,spline=\"P-spline\", nsplines=8, ties=\"Breslow\",tol=1e-9, iter.max=20L, method=\"Newton\", lambda=1e8,factor=10, btr=\"dynamic\", sigma=1e-2, tau=0.6,stop=\"incre\", parallel=FALSE, threads=1L, degree=3L, TIC = FALSE, TIC_prox = FALSE, lambda_spline = 0, ord = 4, fixedstep = FALSE, effectsize = 0, difflambda = FALSE,addsecond = FALSE, penalizestop = FALSE, ICLastOnly = FALSE) main function package coxtp refers “Cox Non-proportional Hazards model penalization”.","code":""},{"path":"/articles/Model_Parameters.html","id":"common-parameters","dir":"Articles","previous_headings":"1. coxtp:","what":"1.1 Common Parameters","title":"Model_Parameters","text":"coxtp function two required input, formula data. formula: coxtp() function requires similar inputs familiar coxph() package survival.example formula=Surv(time, event) ~ tv(X1) + tv(X2) + strata(strata) data: dataset cox model, contain variables listed formula event: Event vector, vector containing 0 1 z: Covariate matrix time: Time vector, vector non-negative numeric value","code":""},{"path":"/articles/Model_Parameters.html","id":"method-related-parameters","dir":"Articles","previous_headings":"1. coxtp:","what":"1.2 Method related Parameters:","title":"Model_Parameters","text":"offered model estimation penalization without penalization. Detail method found paper(add link ). Following parameters defines model settings: spline: spline term Penalized Newton’s Method(Add section Number related paper). Default setting spline=\"Smooth-spline\" \"P-spline\": P-splines low rank smoother using B-spline basis. Detail information P-spline found (Add section number link) \"Smooth-spline\" : (Add section number link) nsplines : Number base functions B-splines, default 8. method : Selecting Method used, default method=\"Newton\" \"Newton\": Usual Newton’s Approach. \"ProxN\" : Proximal Newton–Raphson Method proposed paper(get link ). lambda : Parameter Proximal Newton’s Method. Default lambda=1e8 tau : (Alpha beta?) Newton’s Method, Default tau=0.5. Used control step size. lambda_spline : Smoothing parameter lambda. Default lambda_spline = 0 refers Newton’s Method without penalization. degree: Degree smoothing spline. Default setting degree=3L. degree=2L refers Smoothing quadratic spline. degree=3L refers Smoothing cubic spline. ord : Specify derivative penalize. Default setting ord=4. ord=4: Penalized second order derivative, suggest use using smoothing cubic spline. ord=3: Penalized first order derivative, suggest use using smoothing quadratic spline. penalizestop: delete","code":""},{"path":"/articles/Model_Parameters.html","id":"stopping-creteria-related-parameters","dir":"Articles","previous_headings":"1. coxtp:","what":"1.3 Stopping creteria related Parameters:","title":"Model_Parameters","text":"tol: Convergence threshold. default threshold set tol=1e-6 iter.max: Maximum Iteration number, default iter.max=20L incre: define \\((l^{(m)}-l^{(m-1)})/(l^{(m)}-l^{(0)})\\) relative change log-partial likelihood, m denotes mth step algorithm. ’s smaller certain threshold, stop algorithm. tol variable determining convergence threshold. relch: define relative change log-partial likelihood \\((l^{(m)}-l^{(m-1)})/(l^{(m)})\\), makes easier converge. incre: method stop algorithm half Newton increment less threshold(tol defined previous argument?? correct??). fixedstep: might times stopping criteria working, thus, number steps set manually. Default value fixedstep = FALSE, true, stop iter.max","code":""},{"path":"/articles/Model_Parameters.html","id":"other-parameters","dir":"Articles","previous_headings":"1. coxtp:","what":"1.4 Other Parameters:","title":"Model_Parameters","text":"\"Breslow\": Breslow approximation. Detailed information found (add link) \"none: Don’t deal ties \"none\": Don’t Backtracking Linesearch. \"static\" : binary predictors extremely low frequency present, calculation second order derivative issues. case, Newton increment presents extreme values, leading huge bias. provided way limiting step size cases. Instead using Newton increment, use fixed value 1. method referred “static” function. Since moves slower, usually can achieve maximum likelihood estimator, leading biased estimation. \"dynamic\" : Backtracking Linesearch Newton Increment. Detail information found (Add link) parallel: Parallel computation, Default parallel=FALSE threads : Parallel computation parameter(number cores)Default threads=1L TIC_prox : calculating information criteria, might numerical issue(second order derivative, Hessian matrix approximate singular), thus proposed add small term diagonal. Default TIC_prox = FALSE ICLastOnly : calculate last information criteria TRUE. Default ICLastOnly=FALSE","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Xueting Tao. Author, maintainer. Lingfeng Luo. Author. Wenbo Wu. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tao X, Luo L, Wu W (2022). surtvep: Cox Non-proportional Hazards model penalization. R package version 1.0.0, https://github.com/umich-biostatistics/surtvep.","code":"@Manual{,   title = {surtvep: Cox Non-proportional Hazards model with penalization},   author = {Xueting Tao and Lingfeng Luo and Wenbo Wu},   year = {2022},   note = {R package version 1.0.0},   url = {https://github.com/umich-biostatistics/surtvep}, }"},{"path":"/index.html","id":"surtvep","dir":"","previous_headings":"","what":"Cox Non-proportional Hazards model with penalization","title":"Cox Non-proportional Hazards model with penalization","text":"Cox Non-PH model penalization","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Cox Non-proportional Hazards model with penalization","text":"Large-scale time--event data derived national disease registries arise rapidly medical studies. Detecting accounting time-varying effects particularly important, time-varying effects already reported clinical literature. However, traditional methods modeling time-varying survival models typically rely expanding original data repeated measurement format, , even moderate sample size, usually leads intractably large working dataset. Consequently, computational burden increases dramatically sample size grows, precluding evaluation time-varying effects large-scale studies. Thus, propose computationally efficient Kronecker product-based proximal algorithm, enables us extend existing methods estimating time-varying effects time--event data large-scale context. Detailed information method found (Insert Link) Also, allowing paralle computing, packages handle moderate large sample size quite well compared current packages methods compare end file.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Cox Non-proportional Hazards model with penalization","text":"```{r } #Install package, need install devtools packages: install.packages(“devtools”) devtools::install_github(“UM-KevinHe/surtvep”) #install Vignettes: install.packages(“devtools”) devtools::install_github(“UM-KevinHe/surtvep”,build_vignettes =T)","code":"## Usage:  Here, we are using the Simulation study included in our packages as an example  ```{r } library(surtvep)  #Load Simulation study sim_data=sim_data #Clean and create label and covariate matrix for the package: event=sim_data[,\"event\"] time=sim_data[,\"time\"] data=sim_data[,!colnames(sim_data) %in% c(\"event\",\"time\")]  #Fit the model(Time varying model without penalty)  fit <- coxtp(event = event, z = data, time = time) coxtp.plot(fit,coef=\"V1\")"},{"path":[]},{"path":"/index.html","id":"detailed-tutorial","dir":"","previous_headings":"","what":"Detailed tutorial","title":"Cox Non-proportional Hazards model with penalization","text":"detailed tutorial model paramter explaination, please go ","code":""},{"path":"/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help:","title":"Cox Non-proportional Hazards model with penalization","text":"encounter problems bugs, please contact : xuetao@umich.edu","code":""},{"path":"/reference/coxtp.baseline.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculating Baseline hazard using the result from coxtp() — coxtp.baseline","title":"Calculating Baseline hazard using the result from coxtp() — coxtp.baseline","text":"Calculating Baseline hazard using result coxtp()","code":""},{"path":"/reference/coxtp.baseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculating Baseline hazard using the result from coxtp() — coxtp.baseline","text":"","code":"coxtp.baseline(fit, delta, z, time, strata = c())"},{"path":"/reference/coxtp.baseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculating Baseline hazard using the result from coxtp() — coxtp.baseline","text":"fit Model get coxtp delta event vector, vector containing 0 1 z Covariate matrix time Time vector, vector non-negative numeric value strata stratification group defined data. exist stratification group, please enter vector.","code":""},{"path":[]},{"path":"/reference/coxtp.html","id":null,"dir":"Reference","previous_headings":"","what":"Cox Non-proportional Hazards model with penalization: Main function — coxtp","title":"Cox Non-proportional Hazards model with penalization: Main function — coxtp","text":"Cox Non-proportional Hazards model penalization: Main function","code":""},{"path":"/reference/coxtp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cox Non-proportional Hazards model with penalization: Main function — coxtp","text":"","code":"coxtp(   event,   z,   time,   strata = c(),   spline = \"Smooth-spline\",   nsplines = 8,   ties = \"Breslow\",   tol = 1e-09,   iter.max = 20L,   method = \"Newton\",   lambda = 1e+08,   btr = \"static\",   tau = 0.5,   stop = \"ratch\",   parallel = FALSE,   threads = 1L,   degree = 3L,   TIC = FALSE,   TIC_prox = FALSE,   lambda_spline = 0,   ord = 4,   fixedstep = FALSE,   ICLastOnly = TRUE,   penalizestop = FALSE )"},{"path":"/reference/coxtp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cox Non-proportional Hazards model with penalization: Main function — coxtp","text":"event event vector, vector containing 0 1 z Covariate matrix time Time vector, vector non-negative numeric value strata stratification group defined data. exist stratification group, please enter vector. spline spline term Penalized Newton's Method(Add section Number related paper). Default setting spline=\"Smooth-spline\" nsplines Number base functions B-splines, default 8. ties Ways deal ties, default ties=\"Breslow\": tol Convergence threshold. default threshold set tol=1e-6 iter.max Maximum Iteration number, default iter.max=20L method Selecting Method used, default method=\"Newton\" lambda Parameter Proximal Newton's Method. Default lambda=1e8 btr Backtracking line search approach, default btr=\"static\": tau (Alpha beta?) Newton's Method, Default tau=0.5. Used control step size. stop Stopping rule, default stop=\"ratch\": parallel Parallel computation, Default parallel=FALSE threads Parallel computation parameter(number cores)Default threads=1L degree Degree smoothing spline. Default setting degree=3L. TIC  TIC_prox calculating information criteria, might numerical issue(second order derivative, Hessian matrix approximate singular), thus proposed add small term diagonal. Default TIC_prox = FALSE lambda_spline Smoothing parameter lambda. Default lambda_spline = 0 refers Newton's Method without penalization. ord Specify derivative penalize. Default setting ord=4. fixedstep might times stopping criteria working, thus, number steps set manually. Default value fixedstep = FALSE, true, stop iter.max ICLastOnly calculate last information criteria TRUE. Default ICLastOnly=FALSE penalizestop","code":""},{"path":[]},{"path":"/reference/coxtp.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting result from coxtp() function — coxtp.plot","title":"Plotting result from coxtp() function — coxtp.plot","text":"Plotting result coxtp() function","code":""},{"path":"/reference/coxtp.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting result from coxtp() function — coxtp.plot","text":"","code":"coxtp.plot(   fit,   IC = \"AIC\",   coef,   xlab = \"Time\",   ylab = \"Hazard Ratio (log-scale)\" )"},{"path":"/reference/coxtp.plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting result from coxtp() function — coxtp.plot","text":"fit Model get coxtp IC Creteria selected plotting coef variable needed plotted","code":""},{"path":[]},{"path":"/reference/sim_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data for surtvep with 5000 observations of 4 variables: — sim_data","title":"Example data for surtvep with 5000 observations of 4 variables: — sim_data","text":"Example data surtvep 5000 observations 4 variables:","code":""},{"path":"/reference/sim_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data for surtvep with 5000 observations of 4 variables: — sim_data","text":"","code":"sim_data"},{"path":"/reference/sim_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data for surtvep with 5000 observations of 4 variables: — sim_data","text":"data.frame V1 Simulated covariate V1, Binary variable 0, 1. True time-dependent function b(t)=1 V2 Simulated covariate V2, Binary variable 0, 1. True time-dependent function b(t)=exp(-1.5*t) event Simulated event variable, Binary varible 0, 1 time Simulated time variable, Continous variable non-negative value","code":""},{"path":"/reference/sim_data_p5.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data for surtvep with 5000 observations of 7 variables: — sim_data_p5","title":"Example data for surtvep with 5000 observations of 7 variables: — sim_data_p5","text":"Example data surtvep 5000 observations 7 variables:","code":""},{"path":"/reference/sim_data_p5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data for surtvep with 5000 observations of 7 variables: — sim_data_p5","text":"","code":"sim_data_p5"},{"path":"/reference/sim_data_p5.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data for surtvep with 5000 observations of 7 variables: — sim_data_p5","text":"data.frame 5000 observations 7 variables: V1 Simulated covariate V1, Binary variable 0, 1. True time-dependent function b(t)=1 V2 Simulated covariate V2, Binary variable 0, 1. True time-dependent function b(t)=sin(3pit/4) V3 Simulated covariate V2, Binary variable 0, 1. True time-dependent function b(t)=-1 V4 Simulated covariate V2, Binary variable 0, 1. True time-dependent function b(t)=(t/3)**2exp(t/2) V5Simulated covariate V2, Binary variable 0, 1. True time-dependent function b(t)=exp(-1.5t) event Simulated event variable, Binary varible 0, 1 time Simulated time variable, Continous variable non-negative value","code":""},{"path":"/reference/sim_data_p5_f5.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data for surtvep with 5000 observations of 8 variables(With strata): — sim_data_p5_f5","title":"Example data for surtvep with 5000 observations of 8 variables(With strata): — sim_data_p5_f5","text":"Example data surtvep 5000 observations 8 variables(strata):","code":""},{"path":"/reference/sim_data_p5_f5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data for surtvep with 5000 observations of 8 variables(With strata): — sim_data_p5_f5","text":"","code":"sim_data_p5_f5"},{"path":"/reference/sim_data_p5_f5.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data for surtvep with 5000 observations of 8 variables(With strata): — sim_data_p5_f5","text":"data.frame V1 Simulated covariate V1, Binary variable 0, 1. True time-dependent function b(t)=1 V2 Simulated covariate V2, Binary variable 0, 1. True time-dependent function b(t)=sin(3pit/4) V3 Simulated covariate V2, Binary variable 0, 1. True time-dependent function b(t)=-1 V4 Simulated covariate V2, Binary variable 0, 1. True time-dependent function b(t)=(t/3)**2exp(t/2) V5Simulated covariate V2, Binary variable 0, 1. True time-dependent function b(t)=exp(-1.5t) event Simulated event variable, Binary varible 0, 1 time Simulated time variable, Continous variable non-negative value facility Simulated stratification variable. 5 levels","code":""}]
